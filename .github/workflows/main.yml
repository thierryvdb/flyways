name: Main

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  FLYWAY_LICENSE_KEY: ${{ secrets.FLYWAY_LICENSE_KEY }}
  FIRST_UNDO_SCRIPT: ${{ secrets.FIRST_UNDO_SCRIPT }}
  ACTIONS_RUNNER_DEBUG: true

jobs:
  info:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: List SQL files
        run: |
          find ${{ github.workspace }} -name "*.sql"

  lint:
    needs:
      - info
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Lint SQL files and generate report
        run: |
          find ${{ github.workspace }}/*/migrations -name '*.sql' -exec sqlfluff lint {} --dialect mysql --format=human \; >> testereport.txt

# Uncomment the following section if you want to include a "fix" job
#   fix:
#     needs:
#       - lint
#     runs-on: self-hosted
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3
#
#       - name: Fix SQL Files and generate report
#         run: |
#           find ${{ github.workspace}}/*/migrations -name '*.sql' -exec sqlfluff fix {} --dialect mysql {} \;

# Newly added build job - build should be the database that is going to get tested for the new added code
  build:
    needs:
      - lint
    name: Deploy Build
    runs-on: self-hosted
    environment: 'build'
    env:
      stage: 'Build'
      databaseName: ${{ secrets.databaseName }}
      JDBC: ${{ secrets.JDBC }}
      userName: ${{ secrets.userName }}
      password: ${{ secrets.password }}
      displayName: 'Build'
      executeBuild: true
      publishArtifacts: true

    steps:
      - uses: actions/checkout@v3

      - name: Create Flyway Command Variable
        if: ${{ true }}
        run: |
          echo "FLYWAY_COMMAND='sudo /usr/local/bin/flyway -user=${{ env.userName }} -password=${{ env.password }}  -configFiles=${{ GITHUB.WORKSPACE }}/Coffee/flyway.toml -locations=filesystem:${{ GITHUB.WORKSPACE }}/Coffee/migrations -baselineOnMigrate=true'" >> $GITHUB_ENV
        continue-on-error: true

      - name: Clean Build DB
        if: env.executeBuild == 'true'
        run: |
          eval ${{ env.FLYWAY_COMMAND }} info clean info -url="${{ env.JDBC }}" -cleanDisabled='false'

      - name: Migrate Build DB
        if: env.executeBuild == 'true'
        run: |
          eval ${{ env.FLYWAY_COMMAND }} info migrate info -url="${{ env.JDBC }}" -cleanDisabled='false'

      - name: Stage files for publishing
        if: env.publishArtifacts == 'true'
        run: |
          mkdir -p Artifact_Files/Migration/
          cp -R ${{ GITHUB.WORKSPACE }}/Coffee/migrations Artifact_Files/Migration/

      - name: Publish Validated Migration Scripts as Artifact
        if: env.publishArtifacts == 'true'
        uses: actions/upload-artifact@v3.1.1
        with:
          name: flyway-build-artifact
          path: Artifact_Files/Migration/

# Build is ok, going to change report production

  prod-preparation:
    name: Production Deployment Preparation - Report Creation
    # The type of runner that the job will run on
    runs-on: self-hosted
    environment: 'prod' #Ensure this environment name is setup in the projects Settings>Environment area. Ensuring any reviewers are also configured
    if: ${{ true }} #Set this variable to false to temporarily disable the job
    needs: build
    env:
      stage: 'Prod'
      # Environment Secrets - Ensure all of the below have been created as an Environment Secret (Projects Settings > Secrects > Actions section, specially related to the environment in question) #
      databaseName: ${{ secrets.databaseName}}
      JDBC: ${{ secrets.JDBC }}
      userName: ${{ secrets.userName }}
      password: ${{ secrets.password }}
      check_JDBC: ${{ secrets.check_JDBC }} 
      check_userName: ${{ secrets.check_userName }}
      check_password: ${{ secrets.check_password }}  
      # End of Environment Secrets #
      generateDriftAndChangeReport: true
      failReleaseIfDriftDetected: false
      staticCodeAnalysis: false #Currently not setup in this pipeline
      publishArtifacts: true

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        
      # Runs the Flyway Check command, to produce a deployment report, against the Production database
      - name: Create Check Reports
        if: env.generateDriftAndChangeReport == 'true'
        run: |
          eval ${{ env.FLYWAY_COMMAND }} -user="${{ env.userName }}" -password="${{ env.password }}" -baselineOnMigrate="true"  -configFiles="${{ GITHUB.WORKSPACE }}/flyway.toml" -locations="filesystem:${{ GITHUB.WORKSPACE }}/*/migrations" check -dryrun -changes -drift "-check.failOnDrift=${{ env.failReleaseIfDriftDetected }}" "-check.buildUrl=${{ env.check_JDBC }}" "-check.buildUser=${{ env.check_userName }}" "-check.buildPassword=${{ env.check_password }}" -url="${{ env.JDBC }}" "-check.reportFilename=${{ GITHUB.WORKSPACE }}/Coffee/reports/${{ env.databaseName }}-Run-${{ GITHUB.RUN_ID }}-Check-Report.html"
        continue-on-error: true

      # Create a directory to stage the artifact files
      - name: Stage files for publishing
        if: env.publishArtifacts == 'true'
        run: |
          mkdir -p Artifact_Files/Reports/
          cp -R ${{ GITHUB.WORKSPACE }}/Coffee/reports Artifact_Files/Reports/

      - name: Publish Check Report as Artifact
        uses: actions/upload-artifact@v2
        with: 
          name: flyway-reports
          path: Artifact_Files/Reports/


# step where if migration on in dev, will continue to here

  prod:
    name: Deploy Production
    # The type of runner that the job will run on
    runs-on: self-hosted
    environment: 'prod' #Ensure this environment name is setup in the projects Settings>Environment area. Ensuring any reviewers are also configured 
    if: ${{ true }} #Set this variable to false to temporarily disable the job
    needs: prod-preparation
    env:
      stage: 'Prod'
      databaseName: ${{ secrets.databaseName}}
      JDBC: ${{ secrets.JDBC }}
      userName: ${{ secrets.userName }}
      password: ${{ secrets.password }}
      pauseForCodeReview: true

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        
      # Runs the Flyway Migrate against the Production database
      - name: Migrate Build DB
        if: ${{ true }}
        run: |
          eval ${{ env.FLYWAY_COMMAND }} -user="${{ env.userName }}" -password="${{ env.password }}" -baselineOnMigrate="true" -configFiles="${{ GITHUB.WORKSPACE }}/flyway.toml" -locations="filesystem:${{ GITHUB.WORKSPACE }}/*/migrations" info migrate info -url="${{ env.JDBC }}" -cleanDisabled='false'